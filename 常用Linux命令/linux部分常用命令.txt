本文档简要地列出了部分linux常用命令及用法(排列顺序不分先后),具体说明可参考各个命令的详细解释.这些是所有发行版通用的,因此没有列出发行版特有的命令如软件包管理器等,查询命令可以用man或tldr命令.man是系统自带的,但是tldr需要另安装.其中man较详细但是较难懂,tldr较简略但是易懂.用法为 man/tldr command,如用man查询ls命令就是 man ls ,用tldr则是tldr ls . 用man查询后按q退出

1.ls
  列出目录中的内容。

  - 列出目录中的文件，每个文件占一行：
    ls -1

  - 列出包含隐藏文件的所有文件：
    ls -a

  - 列出所有文件，如果是目录，则在目录名后面加上「/」：
    ls -F

  - 列出包含隐藏文件的所有文件信息，包括权限，所有者，大小 和修改日期：
    ls -la

  - 列出所有文件信息，大小用人类可读的单位表示（KiB, MiB, GiB）：
    ls -lh

  - 列出所有文件信息，按大小降序排序：
    ls -lS

  - 列出所有文件信息，按修改日期从旧到新排序：
    ls -ltr

  - 只列出目录：
    ls -d */

   - 使用长列表格式
     ls -l
2.cd
更改当前工作目录
- 转到指定目录：
     cd path/to/directory

   - 转到当前目录的父目录：
     cd ..

   - 转到当前用户的主(home)目录：
     cd

   - 转到指定用户的主(home)目录：
     cd ~username

   - 转到先前选择的目录：
     cd -

   - 转到根目录：
     cd /

3.cp
复制文件和目录
  - 复制一个文件到另外一个地方：
    cp 文件的原始路径 文件的目标路径

  - 复制一个文件到另外一个目录, 保持文件名不变：
    cp 文件的原始路径 目标目录路径

  - 递归的复制一个目录内的内容到另外一个地方（如果目标目录 存在，目录被复制到目标目标内部）：
    cp -r 目录的原始路径 目标目录路径

  - 以详细模式递归的复制一个目录 (当文件被复制的时候显示)：
    cp -vr 文件的原始路径 目标目录路径

  - 以交互模式复制文本文件到另外一个地方（在覆盖之前提示用 户）：
    cp -i *.txt 目标目录路径

  - 跟踪软连接复制：
    cp -L 链接 目标目录路径

  - 使用原始文件的全路径，在复制的时候目录不存在则离开创建 ：
    cp --parents 文件的原始路径 文件的目标路径



4.mv
移动或重命名文件和目录
  移动或重命名文件或目录。

  - 移动文件到任意位置：
    mv 来源 目标

  - 移动文件到其他目录，并保持文件名不变：
    mv 来源1 来源2 来源3 目标目录

  - 覆盖现有文件前无需确认：
    mv -f 来源 目标

  - 无论是否有文件权限，覆盖现有文件前均需要确认：
    mv -i 来源 目标

  - 不要覆盖现有的目标文件：
    mv -n 来源 目标

  - 详细模式，移动后打印文件名：
    mv -v 来源 目标

   - 文件名批量添加前缀，x就是需要添加的前缀
     for f in * ; do mv "$f" "x$f" ; done

5.rm
删除文件或目录
- 从任意位置删除文件：
     rm path/to/file path/to/another/file

   - 递归删除目录及其所有子目录：
     rm -r path/to/directory

   - 强行删除目录，不提示确认或显示错误消息：
     rm -rf path/to/directory

   - 交互式删除多个文件，每次删除前都有提示：
     rm -i path/to/file1 path/to/file2 ...

   - 以详细模式删除文件，为每个删除的文件打印一条消息：
     rm -v path/to/directory/*

6.chmod
 修改文件或目录的访问权限。

  - 授予所有者［u］执行［x］文件的权限：
    chmod u+x 文件

  - 授予所有者［u］读［r］和写［w］文件或目录的权限：
    chmod u+rw 文件或目录

  - 移除用户组［g］的文件执行［x］权限：
    chmod g-x 文件

  - 授予所有用户［a］读［r］以及执行［x］文件的权限：
    chmod a+rx 文件

  - 授予其他用户［o］（不在所有者用户组）和用户组［g］同样 的权限：
    chmod o=g 文件

  - 移除其他用户［o］的所有权限：
    chmod o= 文件

  - 递归授予用户组［g］和其他用户［o］目录下所有文件和子目 录的写［w］权限：
    chmod -R g+w,o+w 目录

  - 递归授予所有用户［a］目录下文件的读［r］权限和子目录的 执行［X］权限：
    chmod -R a+rX 目录

补充:数字法
chmod 755 filename  ------> 对应 ------>  字母法： chmod u+rwx, g+rx, o+rx filename
chmod 751 filename  ------> 对应 ------>  字母法： chmod u+rwx, g+rx, o+x  filename
chmod 765 filename  ------> 对应 ------>  字母法： chmod u+rwx, g+rw, o+rx filename
chmod 777 filename  ------> 对应------>  字母法： chmod u+rwx, g+rwx, o+rwx filename
(注释:用户为[u]ser,执行为e[x]ecute,读为[r]ead,写为w[r]ite,所有为[a]ll,其他为[o]ther,用户组为[g]roup)

7.tar
  归档实用程序。
  通常与压缩方法结合使用，例如 gzip 或 bzip2.

  - 创建存档并将其写入文件：
    tar cf target.tar file1 file2 file3

  - 创建一个 gzip 压缩文件并将其写入文件：
    tar czf target.tar.gz file1 file2 file3

  - 使用相对路径从目录创建一个 gzip 压缩文件：
    tar czf target.tar.gz --directory=path/to/directory .

  - 详细地将（压缩的）存档文件提取到当前目录中：
    tar xvf source.tar[.gz|.bz2|.xz]

  - 将（压缩的）存档文件解压缩到目标目录中：
    tar xf source.tar[.gz|.bz2|.xz] --directory=directory

  - 创建压缩存档并将其写入文件，使用存档后缀确定压缩程序：
    tar caf target.tar.xz file1 file2 file3

  - 详细列出 tar 文件的内容：
    tar tvf source.tar

  - 从存档文件中提取与模式匹配的文件：
    tar xf source.tar --wildcards "*.html"

(注释:.tar格式只是将文件打包,并没有压缩,.tar.gz就是将文件打包后再用gzip压缩)

8.sudo 
以超级用户或其他用户身份执行单个命令
- 以超级用户身份运行命令：
     sudo less /var/log/syslog

   - 使用默认编辑器以超级用户身份编辑文件：
     sudo --edit /etc/fstab

   - 以另一个用户和/或组的身份运行命令：
     sudo --user=user --group=group id -a

   - 重复最后一个以 `sudo` 为前缀的命令（仅在 `bash`、`zsh` 等中）：
     sudo !!

   - 使用超级用户权限启动默认 shell 并运行特定于登录的文件（`.profile`、`.bash_profile` 等）：
     sudo --login

   - 在不改变环境的情况下以超级用户权限启动默认 shell：
     sudo --shell

   - 以指定用户身份启动默认 shell，加载用户环境并读取特定于登录的文件（`.profile`、`.bash_profile` 等）：
     sudo --login --user=user

   - 列出调用用户允许（和禁止）的命令：
     sudo --list

9.su
将 shell 切换到另一个用户
- 切换到超级用户（需要root密码）：
     su

   - 切换到给定用户（需要用户密码）：
     su username

   - 切换到给定用户并模拟完整的登录 shell：
     su - username

   - 以另一个用户身份执行命令：
     su - username -c "command"

10.mount
提供对一个目录中整个文件系统的访问
- 显示所有挂载的文件系统：
     mount

   - 将设备挂载到目录：
     mount -t filesystem_type path/to/device_file path/to/target_directory

   - 创建一个特定的目录，如果它不存在并挂载一个设备到它：
     mount --mkdir path/to/device_file path/to/target_directory

   - 将设备挂载到特定用户的目录：
     mount -o uid=user_id,gid=group_id path/to/device_file path/to/target_directory

   - 将 CD-ROM 设备（文件类型为 ISO9660）挂载到 `/cdrom`（只读）：
     mount -t iso9660 -o ro /dev/cdrom /cdrom

   - 挂载在 `/etc/fstab` 中定义的所有文件系统：
     mount -a

   - 挂载 `/etc/fstab` 中描述的特定文件系统（例如 `/dev/sda1 /my_drive ext2 defaults 0 2`）：
     mount /my_drive

   - 将一个目录挂载到另一个目录：
     mount --bind path/to/old_dir path/to/new_dir

11.chroot
使用特殊的根目录运行命令或交互式 shell
- 作为新的根目录运行命令：
     chroot path/to/new/root command

   - 指定要使用的用户和组（ID 或名称）：
     chroot --userspec=user:group

12.useradd
创建一个新用户
- 创建一个新用户：
     sudo useradd username

   - 使用指定的用户 ID 创建一个新用户：
     sudo useradd --uid id username

   - 使用指定的 shell 创建一个新用户：
     sudo useradd --shell path/to/shell username

   - 创建属于其他组的新用户（注意缺少空格）：
     sudo useradd --groups group1,group2,... username

   - 使用默认主目录创建新用户：
     sudo useradd --create-home username

   - 创建一个新用户，其主目录由模板目录文件填充：
     sudo useradd --skel path/to/template_directory --create-home username

   - 创建一个没有主目录的新系统用户：
     sudo useradd --system username

13.userdel
删除用户帐户或从组中删除用户
- 删除用户：
     sudo userdel username

   - 删除其他根目录中的用户：
     sudo userdel --root path/to/other/root username

   - 删除用户以及主目录和邮件假脱机：
     sudo userdel --remove username

14.users
显示登录用户列表
- 打印登录用户名：
     users

   - 根据给定文件打印登录用户名：
     users /var/log/wmt

15.usermod
修改用户帐户
- 更改用户名：
     sudo usermod --login new_username username

   - 更改用户id：
     sudo usermod --uid id username

   - 更改用户shell：
     sudo usermod --shell path/to/shell username

   - 将用户添加到补充组（注意缺少空格）：
     sudo usermod --append --groups group1,group2,... username

   - 更改用户主目录：
     sudo usermod --move-home --home path/to/new_home username

16.top
显示有关正在运行的进程的动态实时信息
- 启动top：
     top

   - 不显示任何空闲或僵尸进程：
     top -i

   - 仅显示给定用户拥有的进程：
     top -u user

   - 按字段对进程进行排序：
     top -o field_name

   - 显示给定进程的各个线程：
     top -Hp process_id

   - 仅显示具有给定 PID 的进程，以逗号分隔的列表形式传递。 （通常你不会马上知道 PID。这个例子从进程名称中挑选 PID）：
     top -p $(pgrep -d ',' process_name)

   - 获取有关交互式命令的帮助：
     ？

17.free
显示系统中可用和已用内存的数量
- 显示系统内存：
     free

   - 以字节/KB/MB/GB 显示内存：
     free -b|k|m|g

   - 以人类可读的单位显示内存：
     free -h

   - 每 2 秒刷新一次输出：
     free -s 2

18.uname
Uname 打印有关运行它的机器和操作系统的信息
- 打印所有信息：
     uname --all

   - 打印当前内核名称：
     uname --内核名称

   - 打印当前网络节点主机名：
     uname --nodename

   - 打印当前内核版本：
     uname --kernel-release

   - 打印当前内核版本：
     uname --kernel-version

   - 打印当前机器硬件名称：
     uname --machine

   - 打印当前处理器类型：
     uname --processor

   - 打印当前操作系统名称：
     uname --opreating-system

19.exit
exit

  退出终端程序。

  - 使用最后执行命令的退出代码，退出终端程序：
    exit

  - 使用指定的退出代码，退出终端程序：
    exit exit_code

20.reboot
重新启动启系统
- 立即重新启动：
     reboot
- 立即重启，而无需正常关闭：
    reboot -f

   - 关闭系统（与 `poweroff` 相同）：
     reboot ——poweroff

   - 停止系统（与 `halt` 相同）：
     reboot --halt

   - 立即重启而不联系系统管理员：
     reboot --force

   - 在不重启系统的情况下写入 wtmp shutdown 条目：
     reboot --wtmp-only

21.halt
停止系统
- 停止系统：
     halt

   - 关闭系统（与 `poweroff` 相同）：
     halt --poweroff

   - 重启系统（与 `reboot` 相同）：
     halt --reboot

   - 立即停止而不联系系统管理员：
     halt ——force ——force

   - 在不停止系统的情况下写入 wtmp shutdown 条目：
     halt --wtmp-only

22.poweroff
关闭系统
- 关闭系统电源：
     poweroff

   - 停止系统（与 `halt` 相同）：
     poweroff --halt

   - 重启系统（与 `reboot` 相同）：
     poweroff --reboot

   - 立即关闭而不联系系统管理员：
     poweroff --force --force

   - 在不关闭系统的情况下写入 wtmp 关闭条目：
     poweroff --wtmp-only

23.shutdown
关闭并重新启动系统
- 立即关机（停止）：
     shutdown -h now

   - 立即重启：
     shutdown -r now

   - 5 分钟后重启：
     shutdown -r +5 &

   - 下午 1:00 关闭（使用 24 小时时钟）：
     shutdown -h 13:00

   - 取消挂起的关机/重启操作：
     shutdown -c

24.clear

  清空终端的屏幕。

  - 清空屏幕（相当于在 Bash shell 中按 Control-L 键）：
    clear

  - 清空屏幕但保留终端的回滚缓冲区：
    clear -x

  - 指明要清空的终端类型（默认为环境变量 `TERM` 的值）：
    clear -T type_of_terminal

  - 显示 `clear` 使用的 `ncurses` 版本：
    clear -V

25.uptime
告知系统运行了多长时间等信息
- 打印当前时间、正常运行时间、登录用户数等信息：
     uptime

   - 仅显示系统启动的时间：
     uptime --pretty

   - 打印系统启动的日期和时间：
     uptime --since

   - 显示版本信息：
     uptime --version

26.vim
  Vi IMproved，一个程序员的文本编辑器，提供为不同类型的文档修改设计的多种模式。
  按 `i` 进入插入模式。`Esc` 返回正常模式，正常模式允许使用 Vim 命令。

  - 打开文档：
    vim 文件

  - 打开文件的指定行数：
    vim +行数 文件

  - 查看 Vim 的使用说明：
    :help<Enter>

  - 保存并退出：
    :wq<Enter>

  - 撤销上一个操作：
    u

  - 用特征（pattern）在文件中搜寻，按下 `n`/`N` 切换至上 / 下一个结果：
    /特征<Enter>

  - 对整个文件使用正则表达式进行替换：
    :%s/正则表达式/替换字/g<Enter>

  - 显示行号：
    :set nu<Enter>

27.cat
打印和连接文件
- 将文件内容打印到标准输出：
     cat path/to/file

   - 将多个文件连接成一个输出文件：
     cat path/to/file1 path/to/file2 ... > path/to/output_file

   - 将几个文件附加到输出文件：
     cat path/to/file1 path/to/file2 ... >> path/to/output_file

   - 在 [u]n 缓冲模式下将文件内容复制到输出文件中：
     cat -u /dev/tty12 > /dev/tty13

   - 将 `stdin` 写入文件：
     cat -> path/to/file

   - [n] 编号所有输出行：
     cat -n path/to/file

   - 显示不可打印和空白字符（如果是非 ASCII，则带有 `M-` 前缀）：
     cat -v -t -e path/to/file

28.touch
创建文件并设置访问/修改时间
- 创建特定文件：
     touch path/to/file1 path/to/file2 ...

   - 将文件 [a]ccess 或 [m]odification 时间设置为当前时间，如果文件不存在则不 [c]reate 文件：
     touch -c -a|m path/to/file1 path/to/file2 ...

   - 将文件 [t]ime 设置为特定值，如果文件不存在则不 [c]reate(创建) 文件：
     touch -c -t YYYYMMDDHHMM.SS path/to/flie1 path/to/file2 ...

   - 将特定文件的文件时间设置为 anothe[r](另一个) 文件的时间，如果文件不存在则不[c]reat(创建) 文件：
     touch -c -r ~/.emacs path/to/file1 path/to/file2 ...

29.rename
重命名多个文件
- 使用简单的替换重命名文件（在任何地方用“bar”替换“foo”）：
     rename foo bar *

   - 试运行 - 显示在不执行重命名的情况下会发生哪些重命名：
     rename -vn foo bar *

   - 不要覆盖现有文件：
     rename -o foo bar *

   - 更改文件扩展名：
     rename .ext .bak *.ext

   - 在当前目录中的所有文件名前添加“foo”：
     rename '' 'foo' *

   - 重命名一组编号越来越多的文件，将数字补零至最多 3 位：
     rename foo foo00 foo？ && rename foo foo0 foo??

30.nano
简单易用的命令行文本编辑器。 一个增强的、免费的 Pico 克隆
- 在 nano 中打开一个新文件：
     nano

   - 打开特定文件：
     nano path/to/file

   - 打开一个特定的文件，将光标定位在指定的行和列：
     nano +line,column path/to/file

   - 打开特定文件并启用soft wrapping：
     nano --softwrap path/to/file

   - 打开特定文件并将新行缩进到前几行的缩进：
     nano --autoindent path/to/file

   - 打开 nano 并在保存编辑时创建一个备份文件（`file~`）：
     nano --path/to/file

31.mkdir

  创建目录。

  - 在当前目录或给定路径下创建一个目录：
    mkdir 目录

  - 在当前目录下创建多个目录：
    mkdir 目录_1 目录_2 ...

  - 递归地创建目录（对创建嵌套目录很有用）：
    mkdir -p 路径/到/目录

32.date
设置或显示系统日期
- 使用默认语言环境的格式显示当前日期：
     date +%c

   - 使用 ISO 8601 格式以 UTC 显示当前日期：
     date-u +%Y-%m-%dT%H:%M:%S%Z

   - 将当前日期显示为 Unix 时间戳（自 Unix 纪元以来的秒数）：
     date +%s

   - 将指定为 Unix 时间戳的日期转换为默认格式：
     date-d @1473305798

   - 将给定日期转换为 Unix 时间戳格式：
     date -d "2018-09-01 00:00" +%s --utc

   - 使用 RFC-3339 格式 (`YYYY-MM-DD hh:mm:ss TZ`) 显示当前日期：
     date --rfc-3339=s

   - 使用格式 `MMDDhhmmYYYY.ss` 设置当前日期（`YYYY` 和 `.ss` 是可选的）：
     date  093023592021.59

   - 显示当前 ISO 周数：
     date +%V

33.less
打开文件进行交互式阅读，允许滚动和搜索
- 打开一个文件：
     少源文件

   - 向下/向上翻页：
     <Space> (down)，b (up)

   - 转到文件的结尾/开头：
     G (end) ，g (start)

   - 向前搜索字符串（按 `n`/`N` 转到下一个/上一个匹配项）：
     /something

   - 向后搜索字符串（按 `n`/`N` 转到下一个/上一个匹配项）：
     ?something

   - 按照当前打开文件的输出：
     F

   - 在编辑器中打开当前文件：
     v

   - 退出：
     q

34.tree
将当前目录的内容显示为树
 以树的形式显示当前目录的内容。

  - 显示深度达到 “级数” 级的文件和目录（其中 1 表示当前目录）：
    tree -L 级数

  - 只显示目录：
    tree -d

  - 同时显示隐藏文件：
    tree -a

  - 打印没有缩进行的树，显示完整路径（使用`-N`不转义空格和 特殊字符）：
    tree -i -f

  - 以可读格式打印每个文件节点的大小，目录显示其累积大小（ 类似在`du`命令中所示）：
    tree -s -h --du

  - 使用通配符（glob）模式在树层次结构中查找文件，并删除不 包含匹配文件的目录：
    tree -P '*.txt' --prune

  - 在树层次结构中查找目录，删除不属于所需目录的目录：
    tree -P 文件夹名 --matchdirs --prune

   - 忽略给定目录打印树：
     tree -I 'directory_name1|directory_name2'

35.kill
向进程发送信号，通常与停止进程有关
除 SIGKILL 和 SIGSTOP 之外的所有信号都可以被进程拦截以执行干净退出
- 使用默认的 SIGTERM（终止）信号终止程序：
     kill process_id

   - 列出可用的信号名称（在没有 `SIG` 前缀的情况下使用）：
     kill -l

   - 终止后台作业：
     kill %job_id

   - 使用 SIGHUP（挂断）信号终止程序。 许多守护进程将重新加载而不是终止：
     kill -1|HUP process_id

   - 使用 SIGINT（中断）信号终止程序。 这通常由用户按 `Ctrl + C` 启动：
     kill -2|INT process_id

   - 向操作系统发出信号以立即终止程序（它没有机会捕获信号）：
     kill -9|KILL process_id

   - 通知操作系统暂停程序，直到收到 SIGCONT（“继续”）信号：
     kill -17|STOP process_id

   - 向具有给定 GID（组 ID）的所有进程发送 `SIGUSR1` 信号：
     kill -SIGUSR1 -group_id

36.killall
按名称（必须是确切的名称）向进程的所有实例发送终止信号
除 SIGKILL 和 SIGSTOP 之外的所有信号都可以被进程拦截以执行干净退出
- 使用默认的 SIGTERM（终止）信号终止进程：
     killall process_name

   - 列出可用的信号名称（在没有“SIG”前缀的情况下使用）：
     killall --list

   - 在终止前交互式要求确认：
     killall -i process_name

   - 使用 SIGINT（中断）信号终止进程，这与按 `Ctrl + C` 发送的信号相同：
     killall -INT process_name

   - 强制终止进程：
     killall -KILL process_name

37.startx
startx 脚本是 xinit 的前端，它为运行 X 窗口系统的单个会话提供了一个漂亮的用户界面
- 启动 X 会话：
     startx

   - 使用预定义的深度值启动 X 会话：
     startx -- -depth value

   - 使用预定义的 dpi 值启动 X 会话：
     startx -- -dpi value

   - 覆盖 .xinitrc 文件中的设置并启动新的 X 会话：
     startx /path/to/window_manager_or_desktop_environment

38.xkill
在图形会话中以交互方式终止窗口
- 按下鼠标左键时显示光标以关闭窗口（按下任何其他鼠标按钮可取消）：
     xkill

   - 显示光标以通过按任意鼠标按钮选择要关闭的窗口：
     
     xkill -button any

39.who
显示登录者和相关数据（进程、启动时间）
    - 显示所有当前登录会话的用户名、线路和时间：
      who

    - 仅显示当前终端会话的信息：
      who am i

    - 显示所有可用信息：
      who -a

    - 显示带有表格标题的所有可用信息：
      who -a -H

40.ping
向网络主机发送 ICMP ECHO_REQUEST 数据包。
- ping主机：
     ping host

   - 仅对主机执行特定次数的 Ping：
     ping -c count host

   - Ping 主机，指定请求之间的间隔（以秒为单位）（默认为 1 秒）：
     ping -i seconds_host

   - Ping 主机而不尝试查找地址的符号名称：
     ping -n host

   - Ping 主机并在收到数据包时响铃（如果您的终端支持）：
     ping -a host

   - 如果没有收到回复，也会显示一条消息：
     ping -O host


